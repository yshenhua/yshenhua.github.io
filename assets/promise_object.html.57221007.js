import{_ as o,o as e,c,a as n,d as t,e as p,b as s,r as l}from"./app.8b62e66d.js";const u={},k=p('<h1 id="promise-\u5BF9\u8C61" tabindex="-1"><a class="header-anchor" href="#promise-\u5BF9\u8C61" aria-hidden="true">#</a> Promise \u5BF9\u8C61</h1><h2 id="\u4EC0\u4E48\u662F-promise" tabindex="-1"><a class="header-anchor" href="#\u4EC0\u4E48\u662F-promise" aria-hidden="true">#</a> \u4EC0\u4E48\u662F Promise\uFF1F</h2><p>Promise \u662F\u5F02\u6B65\u7F16\u7A0B\u7684\u4E00\u79CD\u89E3\u51B3\u65B9\u6848\uFF0C\u76F8\u6BD4\u56DE\u8C03\u51FD\u6570\u548C\u4E8B\u4EF6\u66F4\u5408\u7406\u3001\u66F4\u5F3A\u5927\u3002\u5B83\u53EF\u4EE5\u907F\u514D\u56DE\u8C03\u5730\u72F1\u7684\u95EE\u9898\uFF0C\u5E76\u4E14\u652F\u6301\u591A\u5E76\u53D1\u7684\u8BF7\u6C42\u3002\u4ECE\u8BED\u6CD5\u4E0A\u8BB2\uFF0CPromise \u662F\u4E00\u4E2A\u5BF9\u8C61\uFF0C\u4ECE\u5B83\u53EF\u4EE5\u83B7\u53D6\u5F02\u6B65\u64CD\u4F5C\u7684\u6D88\u606F\u3002</p><h2 id="promise-\u7684\u72B6\u6001" tabindex="-1"><a class="header-anchor" href="#promise-\u7684\u72B6\u6001" aria-hidden="true">#</a> Promise \u7684\u72B6\u6001</h2><p>Promise \u6709\u4E09\u79CD\u72B6\u6001\uFF1A</p><ul><li>pending \u521D\u59CB\u72B6\u6001\u4E5F\u53EB\u7B49\u5F85\u72B6\u6001\uFF1B</li><li>fulfilled \u6210\u529F\u72B6\u6001\uFF1B</li><li>rejected \u5931\u8D25\u72B6\u6001\u3002</li></ul><p>\u521B\u5EFA Promise \u5B9E\u4F8B\u540E\uFF0C\u5B83\u4F1A\u7ACB\u5373\u6267\u884C\uFF0C\u8FDB\u5165 pending \u72B6\u6001\u3002\u53EF\u901A\u8FC7 resolve \u8F6C\u53D8\u4E3A fulfilled \u72B6\u6001\uFF0C\u6216\u8005\u901A\u8FC7 reject \u8F6C\u53D8\u4E3A rejected \u72B6\u6001\uFF0C\u72B6\u6001\u6539\u53D8\u540E\u4E0D\u53EF\u9006\uFF0C\u4EFB\u4F55\u65F6\u5019\u90FD\u53EF\u4EE5\u5F97\u5230\u8FD9\u4E2A\u7ED3\u679C\u3002</p><h2 id="\u624B\u5199\u5B9E\u73B0-promise" tabindex="-1"><a class="header-anchor" href="#\u624B\u5199\u5B9E\u73B0-promise" aria-hidden="true">#</a> \u624B\u5199\u5B9E\u73B0 Promise</h2>',8),i=s("\u6309\u7167\u89C4\u8303 "),r={href:"https://promisesaplus.com/",target:"_blank",rel:"noopener noreferrer"},d=s("Promises/A+"),h=s("\uFF0C\u624B\u5199\u5B9E\u73B0 Promise\uFF1A"),f=p(`<ol><li>\u5B9A\u4E49 Promise \u7C7B\uFF0C\u5728 constructor \u4E2D\u7ACB\u5373\u6267\u884C\u4F20\u5165\u7684 executor\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">class</span> <span class="token class-name">MyPromise</span> <span class="token punctuation">{</span>
  <span class="token function">constructor</span><span class="token punctuation">(</span><span class="token parameter">executor</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="2"><li>\u5B9A\u4E49 Promise \u72B6\u6001\uFF0C\u5728 constructor \u4E2D\u5B9A\u4E49 state \u4E3A pending \u72B6\u6001\uFF0C\u5B9A\u4E49 value \u548C reason \u4E3A undefined\uFF0C\u540C\u65F6\u6DFB\u52A0 resolve\u3001reject \u65B9\u6CD5\u66F4\u6539\u72B6\u6001\uFF0Cexecutor \u6267\u884C\u51FA\u9519\u65F6\u8C03\u7528 reject \u65B9\u6CD5\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token constant">PENDING</span> <span class="token operator">=</span> <span class="token string">&#39;pending&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">FULFILLED</span> <span class="token operator">=</span> <span class="token string">&#39;fulFilled&#39;</span><span class="token punctuation">;</span>
<span class="token keyword">const</span> <span class="token constant">REJECTED</span> <span class="token operator">=</span> <span class="token string">&#39;rejected&#39;</span><span class="token punctuation">;</span>

<span class="token operator">...</span>

<span class="token keyword">this</span><span class="token punctuation">.</span>state <span class="token operator">=</span> <span class="token constant">PENDING</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> <span class="token keyword">undefined</span><span class="token punctuation">;</span>

<span class="token keyword">const</span> <span class="token function-variable function">resolve</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">value</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">FULFILLED</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>value <span class="token operator">=</span> value<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">const</span> <span class="token function-variable function">reject</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">reason</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">=</span> <span class="token constant">REJECTED</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>reason <span class="token operator">=</span> reason<span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>

<span class="token keyword">try</span> <span class="token punctuation">{</span>
  <span class="token function">executor</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="3"><li>\u5B9A\u4E49 then \u65B9\u6CD5\uFF0C\u6267\u884C\u4F20\u5165\u7684\u56DE\u8C03\u51FD\u6570\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token function">then</span><span class="token punctuation">(</span><span class="token parameter">onFulfilled<span class="token punctuation">,</span> onRejected</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="4"><li>\u5728 constructor \u4E2D\u5B9A\u4E49 onFulfilledCallbacks \u548C onRejectedCallbacks \u6570\u7EC4\uFF0C\u5982\u679C executor \u4E2D\u7684\u4EFB\u52A1\u662F\u5F02\u6B65\u7684\uFF0C\u5728 then \u65B9\u6CD5\u4E2D\u8BA2\u9605\uFF0C\u7136\u540E\u5728 resolve\u3001reject \u65B9\u6CD5\u4E2D\u53D1\u5E03\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>

<span class="token operator">...</span>

<span class="token comment">// \u53D1\u5E03</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">...</span>

<span class="token comment">// \u53D1\u5E03</span>
<span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">fn</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token operator">...</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token comment">// \u8BA2\u9605</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="5"><li>\u5728 then \u65B9\u6CD5\u4E2D\u8FD4\u56DE\u4E00\u4E2A\u65B0\u7684 promise\uFF0C\u5728 onFulfilled \u6216\u8005 onRejected \u6267\u884C\u5B8C\u6210\u540E\u8C03\u7528 resolvePromise \u65B9\u6CD5\uFF0C\u51FA\u9519\u65F6\u6267\u884C\u8BE5 promise \u7684 reject \u56DE\u8C03\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">let</span> promise2 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">FULFILLED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">REJECTED</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token function">setTimeout</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>status <span class="token operator">===</span> <span class="token constant">PENDING</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token comment">// \u8BA2\u9605</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onFulfilledCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onFulfilled</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token keyword">this</span><span class="token punctuation">.</span>onRejectedCallbacks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">try</span> <span class="token punctuation">{</span>
        <span class="token keyword">let</span> x <span class="token operator">=</span> <span class="token function">onRejected</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span class="token punctuation">;</span>
        <span class="token function">resolvePromise</span><span class="token punctuation">(</span>promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>

<span class="token keyword">return</span> promise2<span class="token punctuation">;</span>
</code></pre></div><ol start="6"><li>\u5B9A\u4E49 resolvePromise \u65B9\u6CD5\uFF0C\u5F53 x \u4E3A promise2 \u65F6\u629B\u51FA TypeError\uFF0C\u5F53 x \u4E3A object\uFF08\u4E0D\u5305\u62EC null\uFF09\u6216\u8005 function \u7C7B\u578B\u65F6\u6267\u884C then \u65B9\u6CD5\uFF0C\u5426\u5219 resolve(x)\uFF1B\u5982\u679C then \u4E0D\u662F funtion \u7C7B\u578B\u76F4\u63A5 resolve(x)\uFF0C\u5426\u5219\u6267\u884C then \u65B9\u6CD5\uFF0C\u540C\u65F6\u6307\u5B9A this \u4E3A x\uFF0C\u7B2C\u4E00\u4E2A\u56DE\u8C03\u4E2D resolve(y)\uFF0C\u7B2C\u4E8C\u4E2A\u56DE\u8C03\u4E2D reject(r)\uFF0C\u4E3A\u4E86\u4FDD\u8BC1\u8FD9\u4E24\u4E2A\u56DE\u8C03\u53EA\u89E6\u53D1\u4E00\u6B21\uFF0C\u5B9A\u4E49\u4E00\u4E2A called \u6765\u6807\u8BB0\uFF0C\u8FC7\u7A0B\u4E2D\u5982\u679C\u629B\u51FA\u9519\u8BEF\u5219\u6267\u884C reject \u56DE\u8C03\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">function</span> <span class="token function">resolvePromise</span><span class="token punctuation">(</span><span class="token parameter">promise2<span class="token punctuation">,</span> x<span class="token punctuation">,</span> resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">if</span> <span class="token punctuation">(</span>promise2 <span class="token operator">===</span> x<span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">return</span> <span class="token function">reject</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TypeError</span><span class="token punctuation">(</span><span class="token string">&#39;Chaining cycle detected for promise&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>

  <span class="token keyword">let</span> called <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>

  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;object&#39;</span> <span class="token operator">&amp;&amp;</span> x <span class="token operator">!==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token keyword">typeof</span> x <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
    <span class="token keyword">try</span> <span class="token punctuation">{</span>
      <span class="token keyword">let</span> then <span class="token operator">=</span> x<span class="token punctuation">.</span>then<span class="token punctuation">;</span>

      <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token keyword">typeof</span> then <span class="token operator">===</span> <span class="token string">&#39;function&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">then</span><span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>
          x<span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token parameter">y</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span><span class="token punctuation">,</span>
          <span class="token punctuation">(</span><span class="token parameter">r</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
            <span class="token keyword">if</span> <span class="token punctuation">(</span>called<span class="token punctuation">)</span> <span class="token keyword">return</span><span class="token punctuation">;</span>
            called <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>
            <span class="token function">reject</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">;</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token function">reject</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">;</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
    <span class="token function">resolve</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">;</span>
  <span class="token punctuation">}</span>
<span class="token punctuation">}</span>
</code></pre></div><ol start="7"><li>\u5B9A\u4E49 catch \u65B9\u6CD5\uFF1B</li></ol><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">catch</span><span class="token punctuation">(</span>errorCallback<span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> errorCallback<span class="token punctuation">)</span><span class="token punctuation">;</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="promise-all-\u3001promise-race-\u548C-promise-allsettled" tabindex="-1"><a class="header-anchor" href="#promise-all-\u3001promise-race-\u548C-promise-allsettled" aria-hidden="true">#</a> Promise.all()\u3001Promise.race() \u548C Promise.allSettled()</h2>`,15),y={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/all",target:"_blank",rel:"noopener noreferrer"},m=s("Promise.all()"),w=n("p",null,"\u6240\u6709\u7684 promise \u90FD\u6210\u529F\u65F6\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u679C\u6570\u7EC4\uFF0C\u5426\u5219\u5931\u8D25\u8FD4\u56DE\u6700\u5148\u5931\u8D25\u7684\u7ED3\u679C\u3002",-1),v={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/race",target:"_blank",rel:"noopener noreferrer"},j=s("Promise.race()"),g=n("p",null,"\u5728\u591A\u4E2A promise \u4E2D\u8FD4\u56DE\u83B7\u53D6\u901F\u5EA6\u6700\u5FEB\u7684\u7ED3\u679C\uFF0C\u65E0\u8BBA\u5176\u662F\u6210\u529F\u8FD8\u662F\u5931\u8D25\u3002",-1),_={href:"https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise/allSettled",target:"_blank",rel:"noopener noreferrer"},x=s("Promise.allSettled()"),b=n("p",null,"\u6240\u6709\u7684 promise \u90FD\u7ED3\u675F\u65F6\u8FD4\u56DE\u4E00\u4E2A\u7ED3\u679C\u6570\u7EC4\uFF0C\u59CB\u7EC8\u80FD\u591F\u5F97\u5230\u6BCF\u4E00\u4E2A promise \u6210\u529F\u6216\u8005\u5931\u8D25\u7684\u7ED3\u679C\u3002",-1);function P(E,C){const a=l("ExternalLinkIcon");return e(),c("div",null,[k,n("p",null,[i,n("a",r,[d,t(a)]),h]),f,n("ul",null,[n("li",null,[n("a",y,[m,t(a)])])]),w,n("ul",null,[n("li",null,[n("a",v,[j,t(a)])])]),g,n("ul",null,[n("li",null,[n("a",_,[x,t(a)])])]),b])}var N=o(u,[["render",P],["__file","promise_object.html.vue"]]);export{N as default};
