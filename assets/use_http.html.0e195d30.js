import{_ as o,o as e,c,a as s,d as t,b as n,e as p,r as u}from"./app.8b62e66d.js";const l={},i=s("h1",{id:"\u4F7F\u7528-node-js-\u5904\u7406-http-\u8BF7\u6C42",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u4F7F\u7528-node-js-\u5904\u7406-http-\u8BF7\u6C42","aria-hidden":"true"},"#"),n(" \u4F7F\u7528 Node.js \u5904\u7406 HTTP \u8BF7\u6C42")],-1),k=s("h2",{id:"\u542F\u52A8\u4E00\u4E2A-http-\u670D\u52A1",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#\u542F\u52A8\u4E00\u4E2A-http-\u670D\u52A1","aria-hidden":"true"},"#"),n(" \u542F\u52A8\u4E00\u4E2A HTTP \u670D\u52A1")],-1),r=n("\u7528 http \u6A21\u5757\u7684 "),d={href:"https://nodejs.org/dist/latest-v18.x/docs/api/http.html#httpcreateserveroptions-requestlistener",target:"_blank",rel:"noopener noreferrer"},g=n("createServer \u65B9\u6CD5"),f=n("\u521B\u5EFA\u4E00\u4E2A server\uFF0C\u76D1\u542C\u7AEF\u53E3 8000\uFF0C\u5C06\u6587\u4EF6\u547D\u540D\u4E3A server.js\uFF1A"),h=p(`<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> http <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">&#39;http&#39;</span><span class="token punctuation">)</span>

<span class="token keyword">const</span> server <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">req<span class="token punctuation">,</span> res</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token string">&#39;response text&#39;</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span><span class="token punctuation">)</span>

server<span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">8000</span><span class="token punctuation">)</span>
</code></pre></div><p>\u901A\u8FC7 node \u542F\u52A8 server.js\uFF1A</p><div class="language-bash ext-sh"><pre class="language-bash"><code><span class="token function">node</span> server.js
</code></pre></div><p>\u8FD9\u6837\u4E00\u4E2A Node.js \u7684 HTTP \u670D\u52A1\u4FBF\u542F\u52A8\u4E86\uFF0C\u5728 Postman \u4E2D\u8BBF\u95EE http://localhost:8000\uFF0C\u53EF\u4EE5\u6536\u5230\u8FD4\u56DE\u7684\u5B57\u7B26\u4E32 response text\u3002</p><h2 id="\u53C2\u6570\u83B7\u53D6" tabindex="-1"><a class="header-anchor" href="#\u53C2\u6570\u83B7\u53D6" aria-hidden="true">#</a> \u53C2\u6570\u83B7\u53D6</h2><h3 id="\u8DEF\u5F84\u53C2\u6570\u3001\u67E5\u8BE2\u53C2\u6570" tabindex="-1"><a class="header-anchor" href="#\u8DEF\u5F84\u53C2\u6570\u3001\u67E5\u8BE2\u53C2\u6570" aria-hidden="true">#</a> \u8DEF\u5F84\u53C2\u6570\u3001\u67E5\u8BE2\u53C2\u6570</h3>`,6),m=n("\u5229\u7528 "),y={href:"https://developer.mozilla.org/en-US/docs/Web/API/URL",target:"_blank",rel:"noopener noreferrer"},x=n("URL \u63A5\u53E3"),v=n(" \u89E3\u6790 req.url \u53EF\u4EE5\u83B7\u53D6\u5176\u4E2D\u7684\u8DEF\u5F84\u53C2\u6570\u53CA\u67E5\u8BE2\u53C2\u6570\uFF0C\u6BD4\u5982\uFF1A"),w=p(`<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> url <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">URL</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>url<span class="token punctuation">,</span> base<span class="token punctuation">)</span>
<span class="token keyword">const</span> path <span class="token operator">=</span> url<span class="token punctuation">.</span>pathname
<span class="token keyword">const</span> searchParams <span class="token operator">=</span> url<span class="token punctuation">.</span>searchParams
<span class="token keyword">const</span> title <span class="token operator">=</span> searchParams<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">&#39;title&#39;</span><span class="token punctuation">)</span>
</code></pre></div><h3 id="body-\u6570\u636E" tabindex="-1"><a class="header-anchor" href="#body-\u6570\u636E" aria-hidden="true">#</a> Body \u6570\u636E</h3><p>Body \u6570\u636E\u9700\u8981\u901A\u8FC7\u76D1\u542C\u4E8B\u4EF6\u83B7\u53D6\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getBodyData</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token parameter">req</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> promise <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">const</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
    req
      <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token parameter">chunk</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
      <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">&#39;end&#39;</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">try</span> <span class="token punctuation">{</span>
          <span class="token keyword">const</span> contentType <span class="token operator">=</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">&#39;content-type&#39;</span><span class="token punctuation">]</span>
          <span class="token keyword">if</span> <span class="token punctuation">(</span>contentType <span class="token operator">===</span> <span class="token string">&#39;application/json&#39;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
            <span class="token keyword">const</span> stringifyData <span class="token operator">=</span> chunks<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token constant">JSON</span><span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>stringifyData<span class="token punctuation">)</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
            <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">)</span>
          <span class="token punctuation">}</span>
        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span>reason<span class="token punctuation">)</span> <span class="token punctuation">{</span>
          <span class="token function">reject</span><span class="token punctuation">(</span>reason<span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> promise
<span class="token punctuation">}</span>
</code></pre></div><p>\u4E0D\u540C\u7684 Content-Type \u6536\u5230\u7684 chunk \u4E0D\u540C\uFF0C\u9700\u8981\u505A\u4E0D\u540C\u7684\u5904\u7406\uFF0C\u6BD4\u5982\u5728\u6536\u5230 Content-Type \u4E3A multipart/form-data \u7684\u8BF7\u6C42\u65F6\u9700\u8981\u6839\u636E\u5176\u4E2D\u7684 boundary \u6765\u5206\u5272\u6570\u636E\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^multipart\\/form-data; boundary=.+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> files <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span> fields <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> boundary<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^multipart\\/form-data; boundary=(.+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>contentType<span class="token punctuation">)</span>
  <span class="token keyword">const</span> stringData <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span>
  stringData<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">--</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>boundary<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">item</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Content-Disposition: form-data; name=.+</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
      <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> disposition<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">Content-Disposition: form-data; (name=.+)</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span>
      <span class="token keyword">const</span> dispositionObj <span class="token operator">=</span> Object<span class="token punctuation">.</span><span class="token function">fromEntries</span><span class="token punctuation">(</span>disposition<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;; &#39;</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token parameter">v</span> <span class="token operator">=&gt;</span> v<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">&#39;=&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter"><span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">]</span></span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span>key <span class="token operator">===</span> <span class="token string">&#39;filename*&#39;</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> <span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>val<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^UTF-8&#39;&#39;</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
        <span class="token keyword">return</span> <span class="token punctuation">[</span>key<span class="token punctuation">,</span> val<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^&quot;(.+)&quot;$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$1&#39;</span><span class="token punctuation">)</span><span class="token punctuation">]</span>
      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">)</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>dispositionObj<span class="token punctuation">.</span>filename<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> stringData <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\r\\n)Content-Disposition: form-data; name=.+\\1Content-Type: .+\\1{2}([\\s\\S]*)\\1$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">const</span> fileData <span class="token operator">=</span> <span class="token punctuation">{</span>
          <span class="token literal-property property">name</span><span class="token operator">:</span> dispositionObj<span class="token punctuation">[</span><span class="token string">&#39;filename*&#39;</span><span class="token punctuation">]</span> <span class="token operator">||</span> dispositionObj<span class="token punctuation">.</span>filename<span class="token punctuation">,</span>
          <span class="token literal-property property">buffer</span><span class="token operator">:</span> Buffer<span class="token punctuation">.</span><span class="token function">from</span><span class="token punctuation">(</span>stringData<span class="token punctuation">,</span> <span class="token string">&#39;binary&#39;</span><span class="token punctuation">)</span>
        <span class="token punctuation">}</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>files<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> files<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        files<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>fileData<span class="token punctuation">)</span>
      <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>
        <span class="token keyword">const</span> stringData <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">replace</span><span class="token punctuation">(</span><span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">(\\r\\n)Content-Disposition: form-data; name=.+\\1{2}([\\s\\S]*)\\1$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">,</span> <span class="token string">&#39;$2&#39;</span><span class="token punctuation">)</span>
        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>fields<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">)</span> fields<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>
        fields<span class="token punctuation">[</span>dispositionObj<span class="token punctuation">.</span>name<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>stringData<span class="token punctuation">)</span>
      <span class="token punctuation">}</span>
    <span class="token punctuation">}</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">{</span> files<span class="token punctuation">,</span> fields <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u9759\u6001\u8D44\u6E90" tabindex="-1"><a class="header-anchor" href="#\u9759\u6001\u8D44\u6E90" aria-hidden="true">#</a> \u9759\u6001\u8D44\u6E90</h2>`,7),_=n("\u53EF\u4EE5\u5229\u7528\u6587\u4EF6\u7CFB\u7EDF\u7684 "),j={href:"https://nodejs.org/dist/latest-v18.x/docs/api/fs.html#filehandlereadfileoptions",target:"_blank",rel:"noopener noreferrer"},b=n("readFile \u65B9\u6CD5"),T=n(" \u8BFB\u53D6\u9759\u6001\u8D44\u6E90\uFF0C\u7136\u540E\u5C06 Content-Type \u8BBE\u7F6E\u4E3A\u5BF9\u5E94\u7684\u683C\u5F0F\uFF0C\u6BD4\u5982\uFF1A"),D=p(`<div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">const</span> <span class="token function-variable function">getStaticFile</span> <span class="token operator">=</span> <span class="token keyword">async</span> <span class="token punctuation">(</span><span class="token parameter">fid</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> filePath <span class="token operator">=</span> path<span class="token punctuation">.</span><span class="token function">join</span><span class="token punctuation">(</span>__dirname<span class="token punctuation">,</span> <span class="token template-string"><span class="token template-punctuation string">\`</span><span class="token string">../static/</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">\${</span>fid<span class="token interpolation-punctuation punctuation">}</span></span><span class="token template-punctuation string">\`</span></span><span class="token punctuation">)</span>
  <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token parameter">resolve<span class="token punctuation">,</span> reject</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
    fs<span class="token punctuation">.</span><span class="token function">readFile</span><span class="token punctuation">(</span><span class="token function">decodeURIComponent</span><span class="token punctuation">(</span>filePath<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token parameter">err<span class="token punctuation">,</span> data</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token punctuation">{</span>
      <span class="token keyword">if</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>
        <span class="token function">reject</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>
        <span class="token keyword">return</span>
      <span class="token punctuation">}</span>
      <span class="token function">resolve</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>
    <span class="token punctuation">}</span><span class="token punctuation">)</span>
  <span class="token punctuation">}</span><span class="token punctuation">)</span>
<span class="token punctuation">}</span>

<span class="token keyword">if</span> <span class="token punctuation">(</span>method <span class="token operator">===</span> <span class="token string">&#39;GET&#39;</span> <span class="token operator">&amp;&amp;</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/static\\/image\\/.+$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">test</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  <span class="token keyword">const</span> <span class="token punctuation">[</span><span class="token punctuation">,</span> fid<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token regex"><span class="token regex-delimiter">/</span><span class="token regex-source language-regex">^\\/static\\/image\\/(.+)$</span><span class="token regex-delimiter">/</span></span><span class="token punctuation">.</span><span class="token function">exec</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span>
  <span class="token keyword">const</span> file <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">getStaticFile</span><span class="token punctuation">(</span>fid<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">catch</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=&gt;</span> <span class="token keyword">null</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">writeHead</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token punctuation">{</span> <span class="token string-property property">&#39;Content-Type&#39;</span><span class="token operator">:</span> <span class="token string">&#39;image/jpeg&#39;</span> <span class="token punctuation">}</span><span class="token punctuation">)</span>
  res<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div><h2 id="\u8DE8\u57DF\u8BF7\u6C42" tabindex="-1"><a class="header-anchor" href="#\u8DE8\u57DF\u8BF7\u6C42" aria-hidden="true">#</a> \u8DE8\u57DF\u8BF7\u6C42</h2><p>\u8BBE\u7F6E Resources Headers \u4E2D\u7684 Access-Control-Allow-Origin \u4E3A\u5BF9\u5E94\u7684\u57DF\uFF0C\u5982\u679C\u9700\u8981\u8BBE\u7F6E\u591A\u4E2A Origin \u53EF\u4EE5\u5229\u7528 req.headers.origin \u5224\u65AD\uFF0C\u6BD4\u5982\uFF1A</p><div class="language-javascript ext-js"><pre class="language-javascript"><code><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">&#39;http://localhost:3000&#39;</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">includes</span><span class="token punctuation">(</span>req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>
  res<span class="token punctuation">.</span><span class="token function">setHeader</span><span class="token punctuation">(</span><span class="token string">&#39;Access-Control-Allow-Origin&#39;</span><span class="token punctuation">,</span> req<span class="token punctuation">.</span>headers<span class="token punctuation">.</span>origin<span class="token punctuation">)</span>
<span class="token punctuation">}</span>
</code></pre></div>`,4);function O(C,q){const a=u("ExternalLinkIcon");return e(),c("div",null,[i,k,s("p",null,[r,s("a",d,[g,t(a)]),f]),h,s("p",null,[m,s("a",y,[x,t(a)]),v]),w,s("p",null,[_,s("a",j,[b,t(a)]),T]),D])}var $=o(l,[["render",O],["__file","use_http.html.vue"]]);export{$ as default};
